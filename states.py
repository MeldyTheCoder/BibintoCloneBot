from keyboards import Keyboards
from models.fields import BaseTextField, BaseMediaField, PhotoField, IntegerField, StringField, CallbackQueryField
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from typing import Union
from types import FunctionType, LambdaType

kbs = Keyboards()

class CustomStatesGroup(StatesGroup):
    fields: dict[str, Union[BaseMediaField, BaseTextField]] = {}
    keyboards: dict[str, FunctionType] = {}
    texts: dict[str, tuple[str]] = {}

    @property
    def state_short_names(self) -> list[str]:
        return [state.replace(f'{self._group_name}:', '') for state in self._state_names]

    async def get_state_short_name(self, state: Union[str, State, FSMContext]) -> str:
        if isinstance(state, State):
            state = state.state

        elif isinstance(state, FSMContext):
            state = str(await state.get_state())

        return state.replace(f'{self._group_name}:', '')

    async def is_last(self, state: Union[str, State, FSMContext]):
        state = await self.get_state_short_name(state)
        return self.state_short_names[-1] == state


    async def get_keyboard(self, state: Union[str, State, FSMContext], **options):
        state_name = await self.get_state_short_name(state)
        if state_name not in self.keyboards:
            return None

        kb = self.keyboards[state_name]
        if isinstance(kb, FunctionType) or isinstance(kb, LambdaType):
            kb = kb(**options)

        return kb


    async def get_text(self, state: Union[str, State, FSMContext], index: int = 0):
        state_name = await self.get_state_short_name(state)
        if state_name not in self.texts:
            return "<b>*–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤*</b>"

        texts = self.texts[state_name]
        if not texts:
            return "<b>*–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤*</b>"

        return texts[index] if index in range(len(texts)) else "<b>*–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤*</b>"

    async def get_field(self, state: Union[str, State, FSMContext]):
        state_name = await self.get_state_short_name(state)
        if state_name not in self.fields:
            return StringField()
        return self.fields[state_name]


class Registration(CustomStatesGroup):
    name = State()
    age = State()
    city = State()
    gender = State()
    photo = State()

    texts = {"name": (f"üí¨ <b>–®–∞–≥</b> <code>1/5</code>\n\n–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è:",
                      "‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å</b>"),

             "age": ("üí¨ <b>–®–∞–≥</b> <code>2/5</code>\n\n–í–≤–µ–¥–∏—Ç–µ –í–∞—à –≤–æ–∑—Ä–∞—Å—Ç:",
                      "‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å</b>"),

             "city": ("üí¨ <b>–®–∞–≥</b> <code>3/5</code>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –í–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞:",
                      "‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å</b>"),

             "gender": ("üí¨ <b>–®–∞–≥</b> <code>4/5</code>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –í–∞—à –ø–æ–ª:",
                      "‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å</b>"),

             "photo": ("üí¨ <b>–®–∞–≥</b> <code>5/5</code>\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –í–∞—à–µ —Ñ–æ—Ç–æ:",
                      "‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å</b>")
             }

    fields = {
        "name": StringField(),
        "age": IntegerField(),
        "city": StringField(),
        "gender": CallbackQueryField(returns_key='id', id=int),
        "photo": PhotoField()
    }

    keyboards = {
        "name": kbs.back_to('main_menu'),
        "age": kbs.back_to('main_menu'),
        "city": kbs.choose_city(back_to_action='main_menu'),
        "gender": lambda **kwargs: kbs.choose_gender(kwargs['db'].get_genders(), back_to_action='main_menu'),
        "photo": kbs.back_to('main_menu')
    }


class ProfileSettings(CustomStatesGroup):
    name = State()
    age = State()
    city = State()
    gender = State()
    photo = State()

    texts = {'name': ('üìù <b>–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –Ω–æ–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è:</b>',
                      '‚úÖ <b>–í–∞—à–µ –∏–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!</b>'),

             'age': ('üìù <b>–£–∫–∞–∂–∏—Ç–µ –í–∞—à –≤–æ–∑—Ä–∞—Å—Ç:</b>',
                     '‚úÖ <b>–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!</b>'),

             'city': ('üìù <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –í–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞:</b>',
                      '‚úÖ <b>–í–∞—à –≥–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!</b>'),

             'gender': ('üìù <b>–í—ã–±–µ—Ä–∏—Ç–µ –í–∞—à –ø–æ–ª:</b>',
                        '‚úÖ <b>–í–∞—à –ø–æ–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!</b>'),

             'photo': ('üìù <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –í–∞—à–µ –Ω–æ–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ —Ñ–æ—Ç–æ:</b>',
                       '‚úÖ <b>–í–∞—à–µ —Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!</b>')
             }

    fields = {
        "name": StringField(),
        "age": IntegerField(),
        "city": StringField(),
        "gender": CallbackQueryField(returns_key='id', id=int),
        "photo": PhotoField()
    }

    keyboards = {
        "name": kbs.back_to('profile'),
        "age": kbs.back_to('profile'),
        "city": kbs.choose_city(back_to_action='profile'),
        "gender": lambda **kwargs: kbs.choose_gender(kwargs['db'].get_genders(), back_to_action='profile'),
        "photo": kbs.back_to('profile')
    }

